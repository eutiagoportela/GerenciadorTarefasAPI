// <auto-generated />
using System;
using Gerenciador.Infraestrutura;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Gerenciador.Infraestrutura.Migrations
{
    [DbContext(typeof(PostgreSqlDbContext))]
    [Migration("20250618163530_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.20")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Gerenciador.Dominio.Entidades.Carteiras", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DataAtualizacao")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DataCriacao")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal>("Saldo")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("UsuarioId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("UsuarioId")
                        .IsUnique();

                    b.ToTable("Carteiras");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DataAtualizacao = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            DataCriacao = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Saldo = 1000m,
                            UsuarioId = 1
                        },
                        new
                        {
                            Id = 2,
                            DataAtualizacao = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            DataCriacao = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Saldo = 500m,
                            UsuarioId = 2
                        });
                });

            modelBuilder.Entity("Gerenciador.Dominio.Entidades.Transferencias", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DataTransferencia")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Descricao")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<int>("DestinatarioId")
                        .HasColumnType("integer");

                    b.Property<int>("RemetenteId")
                        .HasColumnType("integer");

                    b.Property<int>("Tipo")
                        .HasColumnType("integer");

                    b.Property<decimal>("Valor")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("DataTransferencia");

                    b.HasIndex("DestinatarioId");

                    b.HasIndex("RemetenteId");

                    b.HasIndex("DestinatarioId", "DataTransferencia");

                    b.HasIndex("RemetenteId", "DataTransferencia");

                    b.ToTable("Transferencias");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DataTransferencia = new DateTime(2024, 1, 2, 10, 0, 0, 0, DateTimeKind.Utc),
                            Descricao = "Transferência inicial",
                            DestinatarioId = 2,
                            RemetenteId = 1,
                            Tipo = 2,
                            Valor = 200m
                        },
                        new
                        {
                            Id = 2,
                            DataTransferencia = new DateTime(2024, 1, 2, 11, 0, 0, 0, DateTimeKind.Utc),
                            Descricao = "Depósito inicial",
                            DestinatarioId = 2,
                            RemetenteId = 2,
                            Tipo = 1,
                            Valor = 100m
                        });
                });

            modelBuilder.Entity("Gerenciador.Dominio.Entidades.Usuarios", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DataAtualizacao")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DataCriacao")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("SenhaHash")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("Usuarios");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DataAtualizacao = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            DataCriacao = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Email = "admin@teste.com",
                            Nome = "Administrador",
                            SenhaHash = "$2a$11$zgOZ2xrNLoPYwacLV65mCeDUZLqOJnij6vmKwc/whPrS0DjXNlGlC"
                        },
                        new
                        {
                            Id = 2,
                            DataAtualizacao = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            DataCriacao = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Email = "joao@teste.com",
                            Nome = "João Silva",
                            SenhaHash = "$2a$11$tRJjl6.59d3Z6aRdAuXEa.dXJ1nPUpU91lOmnZ8X8v3KPLXpl7aZ6"
                        });
                });

            modelBuilder.Entity("Gerenciador.Dominio.Entidades.Carteiras", b =>
                {
                    b.HasOne("Gerenciador.Dominio.Entidades.Usuarios", "Usuario")
                        .WithOne("Carteira")
                        .HasForeignKey("Gerenciador.Dominio.Entidades.Carteiras", "UsuarioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("Gerenciador.Dominio.Entidades.Transferencias", b =>
                {
                    b.HasOne("Gerenciador.Dominio.Entidades.Usuarios", "Destinatario")
                        .WithMany("TransferenciasRecebidas")
                        .HasForeignKey("DestinatarioId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Gerenciador.Dominio.Entidades.Usuarios", "Remetente")
                        .WithMany("TransferenciasEnviadas")
                        .HasForeignKey("RemetenteId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Destinatario");

                    b.Navigation("Remetente");
                });

            modelBuilder.Entity("Gerenciador.Dominio.Entidades.Usuarios", b =>
                {
                    b.Navigation("Carteira");

                    b.Navigation("TransferenciasEnviadas");

                    b.Navigation("TransferenciasRecebidas");
                });
#pragma warning restore 612, 618
        }
    }
}
